# #############################################
# 时间：20230714
# 姓名：田鑫
# 电话：18384121601
# 邮箱：965622832@qq.com
# #############################################
一、常量与存储类关键字

主要用#define和const两种方式来定义常量：
1、采用#define预处理的方式，常作为宏定义使用，格式形如：#define 常量名 常量值
【示例】
#define PI 3.14159
2、使用关键字const 前缀声明指定类型的常量，格式形如：const 数据类型 常量名 = 常量值;
【示例】
const int MAX_VALUE = 100;

用于存储类声明定义的主要有auto、register、static、extern等关键字
1、auto 关键字定义的变量只能作用在函数内部，只能用于修饰局部变量，在函数开始时被创建，在函数结束时自动被销毁。
2、register 关键字用于定义存储在寄存器中而不是 RAM 中的局部变量，变量的最大尺寸等于寄存器的大小（通常是一个字）。
    由于没有内存位置，所以不能使用取地址运算符&
3、static 关键字用于指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。
    使用 static 修饰局部变量时，可以在函数调用之间保持局部变量的值。
    使用 static 修饰全局变量和方法时，将变量的作用域限制在声明它的文件内。即只允许同文件内的方法可以调用static修饰的全局变量和方法
    静态变量在程序中只被初始化一次，即使函数被调用多次，该变量的值也不会重置。
4、extern 关键字用于定义在其他文件中声明的全局变量或函数，此关键字要慎用，避免多个文件中存在相同的变量名冲突。
    当使用 extern 关键字修饰全局变量和方法时，不会为变量分配任何存储空间，而只是指示编译器该变量在其他文件中定义。

# #############################################
# 时间：20230714
# 姓名：田鑫
# 电话：18384121601
# 邮箱：965622832@qq.com
# #############################################
二、i++和++i的差别
i++：先运算在自增赋值
++i：先自增赋值后运算
【示例】
i = 0;
a = i++;
b = ++i;
此时a->0 b->2 i->2

# #############################################
# 时间：20230714
# 姓名：田鑫
# 电话：18384121601
# 邮箱：965622832@qq.com
# #############################################
三、常用默认函数
1、sizeof()用于获取变量的长度，可以用于获取数组长度
【示例】
int array_list[5] = {1,2,3,4,5};
int array_len = sizeof(array_list) / sizeof(array_list[0]);

2、C语言下字符串操作函数
strcpy(s1, s2)->用于复制字符串s2到s1
strcat(s1, s2)->将字符串s2连接到s1的末尾
strlen(s1)->返回字符串s1的长度
strcmp(s1, s2)->比较s1和s2的大小，如果相同返回0；s1<s2返回-1；s1>s2返回1
strchr(s1, ch)->返回一个指针，指向字符串s1中字符ch的第一次出现的位置
strstr(s1, s2)->返回一个指针，指向字符串s1中字符串s2的第一次出现的位置

# #############################################
# 时间：20230714
# 姓名：田鑫
# 电话：18384121601
# 邮箱：965622832@qq.com
# #############################################
四、标准输入和输出
1、<stdio.h>库下的输入和输出：
int getchar(int)->从屏幕读取一个可用字符并返回为一个整数，可以循环使用从屏幕上读取多个字符
int putchar(void)->将字符输出到屏幕并返回相同的字符，可以循环使用向屏幕上输出多个字符

char *gets(char *s)->从stdin读取一行到s所指向的缓冲区，知道一个终止符或者EOF
int puts(const char *s)->将字符串s和一个尾随的换行符写入到stdout

int scanf(const char *format,…)->从标准输入六stdin读取输入，并根据format格式来存放输入
int printf(const char *format,…)->将输出写入到stdout，根据提供的格式产生输出

2、<iostream>库下的输入和输出：
需要指定作用域 using namespace std;
输入格式形如：
cin>>string<<endl;
cout<<string<<endl;

# #############################################
# 时间：20230714
# 姓名：田鑫
# 电话：18384121601
# 邮箱：965622832@qq.com
# #############################################
五、文件处理
1、文件打开和关闭的方法
fp = FILE *fopen( const char *filename, const char *mode );
int fclose( FILE *fp );

2、写入文件的方法
int fputc( int c, FILE *fp );
fputc() 函数把参数 c 的字符值写入到 fp 所指向的输出流中。如果写入成功，它会返回写入的字符，如果发生错误，则会返回 EOF。

int fputs( const char *s, FILE *fp );
fputs() 函数把字符串 s 写入到 fp 所指向的输出流中。如果写入成功，它会返回一个非负值，如果发生错误，则会返回 EOF。
【示例】 
fputs("This is testing for fputs...\n", fp);

int fprintf(FILE *fp,const char *format, ...) 
fprintf() 函数把一个字符串写入到文件中。如果写入成功，它会返回一个非负值，如果发生错误，则会返回 EOF。
【示例】
fprintf(fp, "%s", "This is testing for fprintf...\n");

3、读取文件的方法
int fgetc( FILE * fp );
fgetc() 函数从 fp 所指向的输入文件中读取一个字符。返回值是读取的字符，如果发生错误则返回 EOF。下面的函数允许您从流中读取一个字符串：

char *fgets( char *buf, int n, FILE *fp );
fgets() 函数从 fp 所指向的输入流中读取 n - 1 个字符。它会把读取的字符串复制到缓冲区 buf，并在最后追加一个 null 字符来终止字符串。
如果这个函数在读取最后一个字符之前就遇到一个换行符 '\n' 或文件的末尾 EOF，则只会返回读取到的字符，包括换行符
【示例】
fgets(buff, 255, fp);

int fscanf(FILE *fp, const char *format, ...) 
fscanf() 函数来从文件中读取字符串，但是在遇到第一个空格和换行符时，它会停止读取。
【示例】
fscanf(fp, "%s", buff);

# #############################################
# 时间：20230715
# 姓名：田鑫
# 电话：18384121601
# 邮箱：965622832@qq.com
# #############################################
六、STL之string类的默认方法

1、string对象定义的方法：
#include <string.h>
string str;
string str = const char *s;
string str(const char *s);
string(int n, char c);
string(const string &str);

【示例】
string str1;
string str1 = "hello";
string str2("world");
string str3(5, 'c');
string str4(str1);

2、string对象获取对象长度的方法size()和length()
int len1 = str1.size();
int len2 = str2.length();

3、string对象元素的访问、提取等方法
cout<<str1[2]<<endl;
cout<<str1.at(2)<<endl;
string str4 = str3.substr(3, 2);
char str_back = str3.back();
char str_front = str3.front();

4、string对象内元素增加的方法
str1 += ' ';
string str3 = str1 + str2;
str3.append("!");
str3.push_back(' ');
str4.insert(4, str2);

5、string对象内元素的删除方法
str3.pop_back();
str4.erase(4, 3);

6、string对象内元素的查询、比较、交换等方法
int pos2 = str3.find(str2);
int pos1 = str3.rfind(str1);
str3.compare(str2);
str1.swap(str2);

7、string对象的其他操作
string str5;
bool t1 = str5.empty();
getline(cin, str5);
bool t2 = str5.empty();

# #############################################
# 时间：20230715
# 姓名：田鑫
# 电话：18384121601
# 邮箱：965622832@qq.com
# #############################################
七、STL之vector容器的默认方法

1、vector对象的声明定义：
#include <vector>
vector<typename> name;
【示例】
vector<int> vt_a;
vector<int> vt_b(10); 
vector<int> vt_c(10, 1);
vector<int> vt_d(vt_c);
vector<int> vt_e(vt_d.begin(), vt_d.begin()+3);

2、vector对象元素访问
cout<<vt_c[2]<<endl;
cout<<vt_c.at[2]<<endl;
cout<<vt_c.front()<<endl;
cout<<vt_c.back()<<endl;

vector<int>::iterator it = vt_c.begin();
for(int i=0;i<10;i++){
    cout<<*(it+i);
}

for(vector<int>::iterator it=vt_c.begin();it!=vt_c.end();it++){
    cout<<*(it);
}

vector<int>::iterator it = vt_c.rbegin();
for(int i=0;i<10;i++){
    cout<<*(it+i);
}

for(vector<int>::iterator it=vt_c.rbegin();it!=vt_c.rend();it++){
    cout<<*(it);
}

3、vector对象中增加元素的方法
vt_c.push_back(5);
vt_c.insert(vt_c.begin()+2,3);
vt_c.insert(vt_c.begin()+2,3,3);
vt_c.insert(vt_c.begin()+2,vt_d.begin(),vt_d.begin()+3);

4、vector对象中删除函数的方法
vt_c.pop_back();
vt_c.erase(vt_c.begin()+2);
vt_c.erase(vt_c.begin()+2, vt_c.begin()+5);
vt_c.clear();

5、vector对象的容量函数和使用
cout<<vt_d.size()<<endl;
cout<<vt_d.capacity()<<endl;
cout<<vt_d.max_size()<<endl;

6、其他函数和使用方法
bool flag = vt_c.empty();
vt_d.swap(vt_e);
vt_c.assign(3,5);
vt_c.assign(vt_d.begin()+4, vt_d.begin()+7);

# #############################################
# 时间：20230716
# 姓名：田鑫
# 电话：18384121601
# 邮箱：965622832@qq.com
# #############################################
八、STL之List的默认方法

1、list对象的声明定义方法
【示例】
#include <list>
list<int> lst_a;
list<int> lst_b(10);
list<int> lst_c(10, 3);
list<int> lst_d(lst_c);
list<int> lst_e(lst_d.begin(), lst_d.end());

2、list对象的访问
cout<<list_c[2]<<endl;
cout<<list_c.at[2]<<endl;
cout<<list_c.back()<<endl;
cout<<list_c.front()<<endl;

list<int>::iterator it = lst_c.begin();
for(int i=0;i<10;i++){
    cout<<*(it+i);
}

for(vector<int>::iterator it=lst_c.begin();it!=lst_c.end();it++){
    cout<<*(it);
}

vector<int>::iterator it = lst_c.rbegin();
for(int i=0;i<10;i++){
    cout<<*(it+i);
}

for(vector<int>::iterator it=lst_c.rbegin();it!=lst_c.rend();it++){
    cout<<*(it);
}

3、list对象内元素增加的方法
lst_c.push_back(4);
lst_c.push_front(2);
lst_c.insert(lst_c.begin(), 0);

4、list对象内元素元素删除的方法
lst_c.pop_back();
lst_c.pop_front();
lst_c.erase(--lst_c.end());
lst_c.clear();
lst_c.remove(3);

5、list对象容量的获取
cout<<lst_c.size()<<endl;
cout<<lst_c.max_size()<<endl;
cout<<lst_c.empty()<<endl;

6、list对象的其他方法
lst_c.sort();
lst_c.swap(lst_d);
lst_c.assign(3, 2);
lst_c.unique();
lst_d.sort();
lst_c.merge(lst_d); // 要求lst_c和lst_d序列都是有序的

# #############################################
# 时间：20230716
# 姓名：田鑫
# 电话：18384121601
# 邮箱：965622832@qq.com
# #############################################
九、STL之Map的默认方法

1、map对象的声明定义
#include <map>

map<int, string> ID_name;
map<int, string> ID_name = {
    {2015, "Jim"},
    {2016, "Kate"},
    {2017, "Mike"}
};
map<int, string> ID_name1(ID_name);
map<int, string> ID_name2(id_name.begin(), ID_name.end());

2、map对象的访问
cout<<ID_name[2015]<<endl;
map<int, string>::iterator iter = ID_name.begin();
while(iter != ID_name.end()) {
    cout<<iter->first<<" : "<<iter->second<<endl;
    iter++;
}

map<int, string>::iterator riter = ID_name.rbegin();
while(riter != ID_name.rend()) {
    cout<<riter->first<<" : "<<riter->second<<endl;
    riter++;
}
//下面两个方法可以用于查询map内是否存在指定的键值，而不插入新的键值
cout<<ID_name.count(2023)<<endl;

map<int, string>::f_iter = ID_name.find(2023);
if(f_iter == ID_name.end()){
    cout<<"指定map中不存在查询的键值"<<endl;
}

3、map对象内元素新增的方法
ID_name[2018] = "Susam";
ID_name.insert(pair<int, string>(2019, "Kevin"));
ID_name.insert(mak_pair(2020, "Jack"));
ID_name[2021] = "Marsh";
ID_name1.insert(ID_name.begin()+4, ID_name.end());

4、map对象内元素删除的方法
ID_name.erase(2018);
map<int, string>::iter = ID_name.begin();
ID_name.erase(iter);
ID_name.erase(ID_name.begin()+3, ID_name.end());
ID_name.clear();

5、map对象中元素的容量
ID_name.size();
ID_name.max_size();
cout<<ID_name.empty();

6、map对象的其他方法
ID_name.swap(ID_name1);

# #############################################
# 时间：20230716
# 姓名：田鑫
# 电话：18384121601
# 邮箱：965622832@qq.com
# #############################################
十、STL之Set的默认方法

1、set对象的声明定义和部分方法使用
// set对象会自动去重并按升序排列
#include <set>

set<int> set_a;
for(int i = 0; i < 10; i++){
    set_a.insert(i);
}

cout<<set_a.size()<<endl;
cout<<set_a.max_size()<<endl;
cout<<set_a.empty()<<endl;

for(set<int>::iterator iter = set_a.begin(); iter != set_a.end(); iter++){
    cout<<*iter<<endl;
}

set_a.clear();








